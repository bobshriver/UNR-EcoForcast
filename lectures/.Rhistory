18+16+13+10+5+20+10
19+16+13+10+5+20+10
17+16+13+10+5+20+10
load("/Volumes/GoogleDrive/My Drive/PJ_FIA_Data/Model_Results/Paper2/JuMoLam.RData")
plot(climate[,1], siterec)
plot(TreeSP$Climate[,1], siterec)
length(TreeSP$Climate[,1])
length(siterec)
plot(TreeSP$Climate[,1], apply(siterec,2,median)
)
plot(log(TreeSP$Climate[,1]), apply(siterec,2,median)
)
plot(TreeSP$Climate[,2], apply(siterec,2,median)
)
plot(TreeSP$Climate[,2], apply(sitesurv,2,median)
)
plot(TreeSP$Climate[,1], apply(sitesurv,2,median))
load("/Volumes/GoogleDrive/My Drive/PJ_FIA_Data/Model_Results/Paper2/PiMoLam.RData")
plot(TreeSP$Climate[,1], apply(sitesurv,2,median))
plot(TreeSP$Climate[,2], apply(sitesurv,2,median))
plot(TreeSP$Climate[,2], apply(siterec,2,median))
plot(TreeSP$Climate[,1], apply(siterec,2,median))
library(rstan)
library(shinystan)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))##set working directory to current file
data = read.csv('./../data/portal_timeseries.csv')
n<-length(data$NDVI)
#remove last 10
datafit<-data[1:(n-10),] ##This is our "observed data
#####A list is needed to declare the data that goes into the model.
#####The things listed here should match the data block
modeldata<-list(N=dim(datafit)[1], y=datafit$NDVI,rain=datafit$rain)
###Stan fit the model using a monte carlo algorithm. You can essentially think of this as a sophisticated guess and check.
###The end result is a vector of parameters that make up the posterior distrbution.
###This code runs the stan model. It will first compile the code and then run through all of the chains sequentially
###There are a number of parameters you can adjust, chain lengths, number of chains.
fit1<-stan(file='StanExample_Portal.stan',data=modeldata, chains=3,iter=2000, warmup=1000)
fit1
###The extract function can used to extract the parameter value draw from the chains.
###The parameters you want to extract need to be specified.
pars<-rstan::extract(fit1, c('b0','b1','b2','sigma'))
#Notice how long the parameter is # of chains*(Total iterations-warmup)
length(pars$b0)
###Plots of the posterior
par(mfrow=c(2,2))
hist(pars$b0)
hist(pars$b1)
hist(pars$sigma)
PredData<-data[(n-10):n,]
PredData<-data[(n-10):n,]
PredOut<-matrix(NA,length(pars$b0),10)
for (i in 1:length(pars$b0)){
NDVI<-PredData$NDVI[1]
for (t in 1:10){
NDVI<-pars$b0[i]+pars$b1[i]*NDVI+pars$b2[i]*PredData$rain[t]
PredOut[i,t]<-NDVI
}
}
matplot(t(PredOut),type='l')
PredData<-data[(n-10):n,]
PredOut<-matrix(NA,length(pars$b0),10)
for (i in 1:length(pars$b0)){
NDVI<-PredData$NDVI[1]
for (t in 1:10){
NDVI<-pars$b0[i]+pars$b1[i]*NDVI+pars$b2[i]*PredData$rain[t]+rnorm(1,0,pars$sigma[i])
PredOut[i,t]<-NDVI
}
}
matplot(t(PredOut),type='l')
PredData<-data[(n-10):n,]
PredOut<-matrix(NA,length(pars$b0),10)
for (i in 1:length(pars$b0)){
NDVI<-PredData$NDVI[1]
for (t in 1:10){
NDVI<-pars$b0[i]+pars$b1[i]*NDVI+pars$b2[i]*PredData$rain[t]+rnorm(1,0,pars$sigma[i])
PredOut[i,t]<-NDVI
}
}
apply(PredOut,2,)
matplot(t(PredOut),type='l')
apply(PredOut,2,quantiel, probs=c(0.025,.975))
apply(PredOut,2,quantile, probs=c(0.025,.975))
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
PredData<-data[(n-10):n,]
PredOut<-matrix(NA,length(pars$b0),10)
for (i in 1:length(pars$b0)){
NDVI<-PredData$NDVI[1]
for (t in 1:10){
NDVI<-pars$b0[i]+pars$b1[i]*NDVI+pars$b2[i]*PredData$rain[t]+rnorm(1,0,pars$sigma[i])
PredOut[i,t]<-NDVI
}
}
rnorm(1,0,pars$sigma[i])
apply(PredOut,2,quantile, probs=c(0.025,.975))
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
rnorm(1,0,pars$sigma[i])
PredData<-data[(n-10):n,]
PredOut<-matrix(NA,length(pars$b0),10)
for (i in 1:length(pars$b0)){
NDVI<-PredData$NDVI[1]
for (t in 1:10){
NDVI<-pars$b0[i]+pars$b1[i]*NDVI+pars$b2[i]*PredData$rain[t]+rnorm(1,0,pars$sigma[i])
PredOut[i,t]<-NDVI
}
}
apply(PredOut,2,quantile, probs=c(0.025,.975))
rnorm(1,0,pars$sigma[i])
matplot(t(PredOut),type='l')
PredData<-data[(n-10):n,]
PredOut<-array(NA,c(length(pars$b0),10,1000))
for (i in 1:length(pars$b0)){
NDVI<-rep(PredData$NDVI[1],1000)
for (t in 1:10){
NDVI<-pars$b0[i]+pars$b1[i]*NDVI+pars$b2[i]*PredData$rain[t]+rnorm(1000,0,pars$sigma[i])
PredOut[i,t,]<-NDVI
}
}
matplot(t(PredOut[1,]),type='l')
matplot(t(PredOut[1,,]),type='l')
matplot((PredOut[1,,]),type='l')
matplot((PredOut[,,1]),type='l')
matplot(t(PredOut[,,1]),type='l')
PredOut[,,1]
dim(PredOut[,,1])
PredData<-data[(n-10):n,]
PredOut<-matrix(NA,length(pars$b0),10)
for (i in 1:length(pars$b0)){
NDVI<-PredData$NDVI[1]
for (t in 1:10){
NDVI<-pars$b0[i]+pars$b1[i]*NDVI+pars$b2[i]*PredData$rain[t]+rnorm(1,0,sigma[i])
PredOut[i,t]<-NDVI
}
}
PredData<-data[(n-10):n,]
PredOut<-matrix(NA,length(pars$b0),10)
for (i in 1:length(pars$b0)){
NDVI<-PredData$NDVI[1]
for (t in 1:10){
NDVI<-pars$b0[i]+pars$b1[i]*NDVI+pars$b2[i]*PredData$rain[t]+rnorm(1,0,pars$sigma[i])
PredOut[i,t]<-NDVI
}
}
PredData<-data[(n-10):n,]
PredOut<-matrix(NA,length(pars$b0),10)
pars$b0
p=1
NDVI<-PredData$NDVI[1]
NDVI
NDVI<-pars$b0[p]+pars$b1[p]*NDVI+pars$b2[p]*PredData$rain[t]+rnorm(1,0,pars$sigma[p])
NDVI
for (t in 1:10){
NDVI<-pars$b0[p]+pars$b1[p]*NDVI+pars$b2[p]*PredData$rain[t]+rnorm(3000,0,pars$sigma[p])
PredOut[,t]<-NDVI
}
matplot(t(PredOut[,,1]),type='l')
matplot(t(PredOut),type='l')
PredData<-data[(n-10):n,]
PredOut<-matrix(NA,length(pars$b0),10)
for (p in 1:length(pars$b0)){
NDVI<-PredData$NDVI[1]
for (t in 1:10){
NDVI<-pars$b0[p]+NDVI+pars$b2[p]*PredData$rain[t]+rnorm(1,0,pars$sigma[p])
PredOut[p,t]<-NDVI
}
}
matplot(t(PredOut),type='l')
PredOut<-matrix(NA,length(pars$b0),10)
datapred<-data[(n-10):n,]
for(p in 1:length(pars$b0)){
NDVI<-datapred$NDVI[1]
for (t in 1:10){
NDVI<-pars$b0[p]+NDVI+ pars$b2[p]*datapred$rain[t]
PredOut[p,t]<-NDVI
}
}
matplot(t(PredOut),type='l')
PredOut<-matrix(NA,length(pars$b0),10)
datapred<-data[(n-10):n,]
for(p in 1:length(pars$b0)){
NDVI<-datapred$NDVI[1]
for (t in 1:10){
NDVI<-pars$b0[p]+NDVI+ pars$b2[p]*datapred$rain[t]
PredOut[p,t]<-NDVI
}
}
matplot(t(PredOut),type='l')
PredOut<-matrix(NA,length(pars$b0),10)
datapred<-data[(n-10):n,]
for(p in 1:length(pars$b0)){
NDVI<-datapred$NDVI[1]
for (t in 1:10){
NDVI<-pars$b0[p]+NDVI+ pars$b2[p]*datapred$rain[t]+rnorm(1,0,sigma[p])
PredOut[p,t]<-NDVI
}
}
matplot(t(PredOut),type='l')
for(p in 1:length(pars$b0)){
NDVI<-datapred$NDVI[1]
for (t in 1:10){
NDVI<-pars$b0[p]+NDVI+ pars$b2[p]*datapred$rain[t]+rnorm(1,0,pars$sigma[p])
PredOut[p,t]<-NDVI
}
}
matplot(t(PredOut),type='l')
apply(PredOut,2,quantile, probs=c(0.025,.975))
PredOut<-array(NA,c(length(pars$b0),10,1000))
datapred<-data[(n-10):n,]
for(p in 1:length(pars$b0)){
NDVI<-rep(datapred$NDVI[1],1000)
for (t in 1:10){
NDVI<-pars$b0[p]+pars$b1[p]*NDVI+ pars$b2[p]*datapred$rain[t]+rnorm(1000,0,pars$sigma[p])
PredOut[p,t,]<-NDVI
}
}
matplot(PredOut[1,,],type='l')
PredOut<-array(NA,c(length(pars$b0),10,1000))
datapred<-data[(n-10):n,]
for(p in 1:length(pars$b0)){
NDVI<-rep(datapred$NDVI[1],1000)
for (t in 1:10){
NDVI<-pars$b0[p]+NDVI+ pars$b2[p]*datapred$rain[t]+rnorm(1000,0,pars$sigma[p])
PredOut[p,t,]<-NDVI
}
}
matplot(PredOut[1,,],type='l')
matplot(PredOut[,,1],type='l')
matplot(t(PredOut[,,1]),type='l')
PredData<-data[(n-10):n,]
PredOut<-matrix(NA,length(pars$b0),10)
for (p in 1:length(pars$b0)){
NDVI<-PredData$NDVI[1]
for (t in 1:10){
NDVI<-pars$b0[p]+pars$b1[p]*NDVI+pars$b2[p]*PredData$rain[t]
PredOut[p,t]<-NDVI
}
}
apply(PredOut,2,var)
mean(pars$sigma)
1.102233e-04+(mean(pars$sigma)^2)
PredData<-data[(n-10):n,]
PredOut<-matrix(NA,length(pars$b0),10)
for (p in 1:length(pars$b0)){
NDVI<-PredData$NDVI[1]
for (t in 1:10){
NDVI<-pars$b0[p]+pars$b1[p]*NDVI+pars$b2[p]*PredData$rain[t]+rnorm(1,0,pars$sigma[p])
PredOut[p,t]<-NDVI
}
}
1.102233e-04+(mean(pars$sigma)^2)
apply(PredOut,2,var)
9.306643e-06 +(mean(pars$sigma)^2)
PredData<-data[(n-10):n,]
PredOut<-matrix(NA,length(pars$b0),10)
for (p in 1:length(pars$b0)){
NDVI<-PredData$NDVI[1]
for (t in 1:10){
NDVI<-pars$b0[p]+pars$b1[p]*NDVI+pars$b2[p]*PredData$rain[t]+rnorm(1,0,mean(pars$sigma))
PredOut[p,t]<-NDVI
}
}
9.306643e-06 +(mean(pars$sigma)^2)
apply(PredOut,2,var)
PredData<-data[(n-10):n,]
PredOut<-matrix(NA,length(pars$b0),10)
for (p in 1:length(pars$b0)){
NDVI<-PredData$NDVI[1]
for (t in 1:10){
NDVI<-pars$b0[p]+pars$b1[p]*NDVI+pars$b2[p]*PredData$rain[t]
PredOut[p,t]<-NDVI+rnom(1,0,pars$sigma[p])
}
}
PredData<-data[(n-10):n,]
PredOut<-matrix(NA,length(pars$b0),10)
for (p in 1:length(pars$b0)){
NDVI<-PredData$NDVI[1]
for (t in 1:10){
NDVI<-pars$b0[p]+pars$b1[p]*NDVI+pars$b2[p]*PredData$rain[t]
PredOut[p,t]<-NDVI+rnorm(1,0,pars$sigma[p])
}
}
matplot(PredOut,type='l')
matplot(t(PredOut),type='l')
PredData<-data[(n-10):n,]
PredOut<-matrix(NA,length(pars$b0),10)
for (p in 1:length(pars$b0)){
NDVI<-PredData$NDVI[1]
for (t in 1:10){
NDVI<-pars$b0[p]+pars$b1[p]*NDVI+pars$b2[p]*PredData$rain[t]+rnorm(1,0,pars$sigma[p])
PredOut[p,t]<-NDVI
}
}
matplot(t(PredOut),type='l')
PredData<-data[(n-10):n,]
PredOut<-matrix(NA,length(pars$b0),10)
for (p in 1:length(pars$b0)){
NDVI<-PredData$NDVI[1]
for (t in 1:10){
NDVI<-pars$b0[p]+pars$b1[p]*NDVI+pars$b2[p]*PredData$rain[t]
PredOut[p,t]<-NDVI
}
}
head(PredOut)
plot(PredData[1,],type='l')
plot(1:10,PredData[1,],type='l')
PredData[1,]
plot(1:10,PredOut[1,],type='l')
lines(1:10,PredOut[2,],type='l', col='red')
lines(1:10,PredOut[2,],type='l', col='blue')
lines(1:10,PredOut[3,],type='l', col='red')
matplot(t(PredOut), type'l')
matplot(t(PredOut), type='l')
dim(pars)
dim(pars$b0)
?rnorm
?rpois
rnorm(10,0,1)
PredData<-data[(n-10):n,]
PredOut<-matrix(NA,length(pars$b0),10)
for (p in 1:length(pars$b0)){
NDVI<-PredData$NDVI[1]
for (t in 1:10){
NDVI<-pars$b0[p]+pars$b1[p]*NDVI+pars$b2[p]*PredData$rain[t]+rnorm(1,0,pars$sigma[p])
PredOut[p,t]<-NDVI
}
}
matplot(t(PredOut), type='l')
PredData<-data[(n-10):n,]
PredOut<-matrix(NA,length(pars$b0),10)
for (p in 1:length(pars$b0)){
NDVI<-PredData$NDVI[1]
for (t in 1:10){
NDVI<-rnorm(1,pars$b0[p]+pars$b1[p]*NDVI+pars$b2[p]*PredData$rain[t],pars$sigma[p])
PredOut[p,t]<-NDVI
}
}
matplot(t(PredOut), type='l')
PredData<-data[(n-10):n,]
PredOut<-matrix(NA,length(pars$b0),10)
for (p in 1:length(pars$b0)){
NDVI<-PredData$NDVI[1]
for (t in 1:10){
set.seed(1)
NDVI<-rnorm(1,pars$b0[p]+pars$b1[p]*NDVI+pars$b2[p]*PredData$rain[t],pars$sigma[p])
PredOut[p,t]<-NDVI
}
}
matplot(t(PredOut), type='l')
PredData<-data[(n-10):n,]
PredOut<-matrix(NA,length(pars$b0),10)
for (p in 1:length(pars$b0)){
NDVI<-PredData$NDVI[1]
for (t in 1:10){
set.seed(1)
NDVI<-rnorm(1,pars$b0[p]+pars$b1[p]*NDVI+pars$b2[p]*PredData$rain[t],pars$sigma[p])
PredOut[p,t]<-NDVI
}
}
set.seed(1)
rnorm(10)
set.seed(1)
rnorm(10)
set.seed(10)
rnorm(10)
PredData<-data[(n-10):n,]
PredOut<-matrix(NA,length(pars$b0),10)
for (p in 1:length(pars$b0)){
NDVI<-PredData$NDVI[1]
for (t in 1:10){
NDVI<-rnorm(1,pars$b0[p]+pars$b1[p]*NDVI+pars$b2[p]*PredData$rain[t],pars$sigma[p])
PredOut[p,t]<-NDVI
}
}
rnorm(10)
matplot(t(PredOut), type='l')
PredData<-data[(n-10):n,]
PredOut<-matrix(NA,length(pars$b0),10)
for (p in 1:length(pars$b0)){
NDVI<-PredData$NDVI[1]
for (t in 1:10){
NDVI<-pars$b0[p]+pars$b1[p]*NDVI+pars$b2[p]*PredData$rain[t]
PredOut[p,t]<-NDVI+rnorm(1,0,pars$sigma[p]))
}
}
PredData<-data[(n-10):n,]
PredOut<-matrix(NA,length(pars$b0),10)
for (p in 1:length(pars$b0)){
NDVI<-PredData$NDVI[1]
for (t in 1:10){
NDVI<-pars$b0[p]+pars$b1[p]*NDVI+pars$b2[p]*PredData$rain[t]
PredOut[p,t]<-NDVI+rnorm(1,0,pars$sigma[p]))
}
}
PredData<-data[(n-10):n,]
PredOut<-matrix(NA,length(pars$b0),10)
for (p in 1:length(pars$b0)){
NDVI<-PredData$NDVI[1]
for (t in 1:10){
NDVI<-pars$b0[p]+pars$b1[p]*NDVI+pars$b2[p]*PredData$rain[t]
PredOut[p,t]<-NDVI+rnorm(1,0,pars$sigma[p])
}
}
matplot(t(PredOut), type='l')
?rlnorm
PredData<-data[(n-10):n,]
PredOut<-matrix(NA,length(pars$b0),10)
for (p in 1:length(pars$b0)){
NDVI<-PredData$NDVI[1]
for (t in 1:10){
NDVI<-pars$b0[p]+pars$b1[p]*NDVI+pars$b2[p]*PredData$rain[t]+rpois(pars$b0[p]+pars$b1[p]*NDVI+pars$b2[p]*PredData$rain[t])
PredOut[p,t]<-NDVI+rnorm(1,0,pars$sigma[p])
}
}
pars$b0[p]+pars$b1[p]*NDVI+pars$b2[p]*PredData$rain[t]
PredData<-data[(n-10):n,]
PredOut<-matrix(NA,length(pars$b0),10)
for (p in 1:length(pars$b0)){
NDVI<-PredData$NDVI[1]
for (t in 1:10){
NDVI<-pars$b0[p]+pars$b1[p]*NDVI+pars$b2[p]*PredData$rain[t]+rpois(1,pars$b0[p]+pars$b1[p]*NDVI+pars$b2[p]*PredData$rain[t])
PredOut[p,t]<-NDVI+rnorm(1,0,pars$sigma[p])
}
}
matplot(t(PredOut), type='l')
PredData<-data[(n-10):n,]
PredOut<-matrix(NA,length(pars$b0),10)
for (p in 1:length(pars$b0)){
NDVI<-PredData$NDVI[1]
for (t in 1:10){
NDVI<-rpois(1,pars$b0[p]+pars$b1[p]*NDVI+pars$b2[p]*PredData$rain[t])
PredOut[p,t]<-NDVI+rnorm(1,0,pars$sigma[p])
}
}
matplot(t(PredOut), type='l')
options(mc.cores = parallel::detectCores())
fit1<-stan(file='StanExample_Portal.stan',data=modeldata, chains=3,iter=2000, warmup=1000)
fit1
###Stan fit the model using a monte carlo algorithm. You can essentially think of this as a sophisticated guess and check.
###The end result is a vector of parameters that make up the posterior distrbution.
###This code runs the stan model. It will first compile the code and then run through all of the chains sequentially
###There are a number of parameters you can adjust, chain lengths, number of chains.
options(mc.cores = parallel::detectCores())
fit1<-stan(file='StanExample_Portal.stan',data=modeldata, chains=3,iter=2000, warmup=1000)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))##set working directory to current file
fit1<-stan(file='StanExample_Portal.stan',data=modeldata, chains=3,iter=2000, warmup=1000)
library('rstan')
###Stan fit the model using a monte carlo algorithm. You can essentially think of this as a sophisticated guess and check.
###The end result is a vector of parameters that make up the posterior distrbution.
###This code runs the stan model. It will first compile the code and then run through all of the chains sequentially
###There are a number of parameters you can adjust, chain lengths, number of chains.
options(mc.cores = parallel::detectCores())
fit1<-stan(file='StanExample_Portal.stan',data=modeldata, chains=3,iter=2000, warmup=1000)
