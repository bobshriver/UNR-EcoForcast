solve(matrix(1,1000,1000))
solve(matrix(1:(1000^2),1000,1000))
solve(matrix(c(1,2),1000,1000))
matrix(c(1,2),1000,1000)
library(microbenchmark)
install.packages('microbenchmark')
library(microbenchmark)
x <- runif(100)
microbenchmark(
sqrt(x),
x ^ 0.5
)
93587.20*1.11
40*4*4
46/(49/365)
51/(49/365)
3) How would we expect the amount to paramater error relative to process variability to change as we collected more data?
library(rstan)
library(shinystan)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))##set working directory to current file
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))##set working directory to current file
data = read.csv('./../data/portal_timeseries.csv')
setwd("/Users/Bob/Library/CloudStorage/GoogleDrive-rshriver.unr@gmail.com/My Drive/UNR/Classes/EcoForcast/UNR-EcoForcast")
data = read.csv('./../data/portal_timeseries.csv')
data = read.csv('data/portal_timeseries.csv')
n<-length(data$NDVI)
datafit<-data[1:(n-10),] ##This is our "observed data
#####A list is needed to declare the data that goes into the model.
#####The things listed here should match the data block
modeldata<-list(N=dim(datafit)[1], y=datafit$NDVI,rain=datafit$rain)
###Stan fit the model using a monte carlo algorithm. You can essentially think of this as a sophisticated guess and check.
###The end result is a vector of parameters that make up the posterior distrbution.
###This code runs the stan model. It will first compile the code and then run through all of the chains sequentially
###There are a number of parameters you can adjust, chain lengths, number of chains.
fit1<-stan(file='StanExample_Portal.stan',data=modeldata, chains=3,iter=2000, warmup=1000)
library(rstan)
library(shinystan)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))##set working directory to current file
data = read.csv('./../data/portal_timeseries.csv')
library(rstan)
library(shinystan)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))##set working directory to current file
data = read.csv('./../data/portal_timeseries.csv')
n<-length(data$NDVI)
#remove last 10
datafit<-data[1:(n-10),] ##This is our "observed data
#####A list is needed to declare the data that goes into the model.
#####The things listed here should match the data block
modeldata<-list(N=dim(datafit)[1], y=datafit$NDVI,rain=datafit$rain)
###Stan fit the model using a monte carlo algorithm. You can essentially think of this as a sophisticated guess and check.
###The end result is a vector of parameters that make up the posterior distrbution.
###This code runs the stan model. It will first compile the code and then run through all of the chains sequentially
###There are a number of parameters you can adjust, chain lengths, number of chains.
fit1<-stan(file='StanExample_Portal.stan',data=modeldata, chains=3,iter=2000, warmup=1000)
fit1
###The extract function can used to extract the parameter value draw from the chains.
###The parameters you want to extract need to be specified.
pars<-rstan::extract(fit1, c('b0','b1','b2','sigma'))
#Notice how long the parameter is # of chains*(Total iterations-warmup)
length(pars$b0)
###Plots of the posterior
par(mfrow=c(2,2))
hist(pars$b0)
hist(pars$b1)
hist(pars$b2)
hist(pars$sigma)
##visualizations to check convergence. Have chains converged?
#launch_shinystan(fit1)
PredData
PredData<-data[(n-10):n,]
PredOut<-matrix(NA,length(pars$b0),10)
dim(PredData)
PredData
View(PredData)
PredData<-data[(n-10):n,]
PredOut<-matrix(NA,length(pars$b0),10)
PredData<-data[(n-10):n,]
PredOut<-matrix(NA,length(pars$b0),10)
for(p in 1:length(pars$b0)){
NDVI<-PredData$NDVI[1]
for (t in 1:10){
NDVI<-pars$b0[p]+pars$b1[p]*NDVI+pars$b2[p]*PredData$rain[t]
PredOut[p,t]<-NDVI
}
}
matplot(t(PredOut),type='l')
matplot(t(PredOut),type='l')
MeanP<-apply(PredOut,2,mean)
Upper<-apply(PredOut,2,quantile, prob=.975)
Lower<-apply(PredOut,2,quantile, prob=.025)
plot(MeanP,type='l', ylim=c(0,.4))
lines(Upper,lty=2)
lines(Lower,lty=2)
points(PredData$NDVI,col='steelblue')
mean_NDVI<-pars$b0[p]+pars$b1[p]*NDVI+pars$b2[p]*PredData$rain[t]
mean_NDVI
rnorm(1,mean_NDVI,pars$sigma[p])
PredOut<-matrix(NA,length(pars$b0),10)
PredOut_Mean<-matrix(NA,length(pars$b0),10)
for(p in 1:length(pars$b0)){
NDVI<-PredData$NDVI[1]
for (t in 1:10){
mean_NDVI<-pars$b0[p]+pars$b1[p]*NDVI+pars$b2[p]*PredData$rain[t]
NDVI<-rnorm(1,mean_NDVI,pars$sigma[p])
PredOut[p,t]<-NDVI
PredOut_Mean[p,t]<-mean_NDVI
}
}
matplot(t(PredOut),type='l')
MeanP<-apply(PredOut,2,mean)
Upper<-apply(PredOut,2,quantile, prob=.975)
Lower<-apply(PredOut,2,quantile, prob=.025)
plot(MeanP,type='l', ylim=c(0,.4))
lines(Upper,lty=2)
lines(Lower,lty=2)
points(PredData$NDVI,col='steelblue')
PredData<-data[(n-10):n,]
PredOut<-matrix(NA,length(pars$b0),10)
PredOut_Mean<-matrix(NA,length(pars$b0),10)
for(p in 1:length(pars$b0)){
NDVI<-PredData$NDVI[1]
for (t in 1:10){
NDVI<-pars$b0[p]+pars$b1[p]*NDVI+pars$b2[p]*PredData$rain[t]
#NDVI<-rnorm(1,mean_NDVI,pars$sigma[p])
PredOut[p,t]<-rnorm(1,NDVI,pars$sigma[p])
PredOut_Mean[p,t]<-mean_NDVI
}
}
matplot(t(PredOut),type='l')
MeanP<-apply(PredOut,2,mean)
Upper<-apply(PredOut,2,quantile, prob=.975)
Lower<-apply(PredOut,2,quantile, prob=.025)
plot(MeanP,type='l', ylim=c(0,.4))
lines(Upper,lty=2)
lines(Lower,lty=2)
points(PredData$NDVI,col='steelblue')
PredData$NDVI[1]
fit1
for(p in 1:length(pars$b0)){
mean_NDVI<-PredData$NDVI[1]
for (t in 1:10){
mean_NDVI<-pars$b0[p]+pars$b1[p]* mean_NDVI+pars$b2[p]*PredData$rain[t
PredOut_Mean[p,t]<-mean_NDVI
for(p in 1:length(pars$b0)){
mean_NDVI<-PredData$NDVI[1]
for (t in 1:10){
mean_NDVI<-pars$b0[p]+pars$b1[p]* mean_NDVI+pars$b2[p]*PredData$rain[t]
PredOut_Mean[p,t]<-mean_NDVI
}
}
PredData<-data[(n-10):n,]
PredOut<-matrix(NA,length(pars$b0),10)
PredOut_Mean<-matrix(NA,length(pars$b0),10)
###parameter and process
for(p in 1:length(pars$b0)){
NDVI<-PredData$NDVI[1]
for (t in 1:10){
mean_NDVI<-pars$b0[p]+pars$b1[p]*NDVI+pars$b2[p]*PredData$rain[t]
NDVI<-rnorm(1,mean_NDVI,pars$sigma[p])
PredOut[p,t]<-NDVI
}
}
###Parameter Error
for(p in 1:length(pars$b0)){
mean_NDVI<-PredData$NDVI[1]
for (t in 1:10){
mean_NDVI<-pars$b0[p]+pars$b1[p]* mean_NDVI+pars$b2[p]*PredData$rain[t]
PredOut_Mean[p,t]<-mean_NDVI
}
}
MeanP<-apply(PredOut,2,mean)
Upper<-apply(PredOut,2,quantile, prob=.975)
Lower<-apply(PredOut,2,quantile, prob=.025)
Upper_m<-apply(PredOut_Mean,2,quantile, prob=.975)
Lower_m<-apply(PredOut_Mean,2,quantile, prob=.025)
matplot(t(PredOut),type='l')
MeanP<-apply(PredOut,2,mean)
Upper<-apply(PredOut,2,quantile, prob=.975)
Lower<-apply(PredOut,2,quantile, prob=.025)
Upper_m<-apply(PredOut_Mean,2,quantile, prob=.975)
Lower_m<-apply(PredOut_Mean,2,quantile, prob=.025)
plot(MeanP,type='l', ylim=c(0,.4))
lines(Upper,lty=2)
lines(Lower,lty=2)
lines(Upper_m,lty=2)
lines(Lower_m,lty=2)
points(PredData$NDVI,col='steelblue')
14455/5
59000.00/2/12
19396/2458
3500/2200
56/(52/365)
