setwd("/Users/Bob/Library/CloudStorage/GoogleDrive-rshriver.unr@gmail.com/My Drive/UNR/Classes/EcoForcast/UNR-EcoForcast")
library(forecast)
library(stlplus)
library(fpp)
observed_timeseries <- read.csv("data/portal_timeseries.csv")
n<-length(observed_timeseries$NDVI)
#remove last 10
datafit<-observed_timeseries[1:(n-10),] ##This is our "observed data
head(datafit)
tail(datafit)
#Question 1
##indexing
length(datafit$NDVI)
end <- length(datafit$NDVI)
NDVI_t1 <- datafit$NDVI[-1] # present
NDVI_t0 <- datafit$NDVI[-end] # past
#create linear model
AR.lm <- lm(NDVI_t1~NDVI_t0, data = datafit)
AR.lm
plot(AR.lm)
#create time sequence and vector for C
B0 <- AR.lm$coefficients[1]
B1 <- AR.lm$coefficients[2]
#Y_t1 <- B0 + B1*NDVI_t1
initialC <- datafit$NDVI[end]
time <- seq(1:11) #Time
C <-  rep(NA,length(time))
#names(initC) <- time
C
C[1] <- initialC
#create AR growth function
ARgrowth <- function(B0,B1,Y_1){
final_result = B0 + B1*Y_1
return(final_result)
}
#for loop initiated
i=1
for (i in 2:length(time)){
C[i] = ARgrowth(B0=B0,B1=B1,Y_1=C[i-1])
}
C
#plot time series of NDVI over 11 months
par(mfrow=c(2,1))
plot(1:11,C,ylab='NDVI',xlab='Month', type='l', ylim=c(0,.5))
points(observed_timeseries$NDVI[(n-10):n], col='red')
#Question 3
#Repeat steps 1 & 2 using rain at t-1 along with NDVI at t-1 to explain NDVI at t
length(datafit$rain)
rain_end <- length(datafit$rain)
rain_t0 <- datafit$rain[-rain_end]
#create linear model incorporating rain
AR_rain.lm <- lm(NDVI_t1~NDVI_t0+rain_t0, data = datafit)
AR_rain.lm
#look at coefficients for AR_rain.lm
B0_1 <- AR_rain.lm$coefficients[1]
B1_2 <- AR_rain.lm$coefficients[2]
B2 <- AR_rain.lm$coefficients[3]
#create time sequence and vector for IC
initialC2 <- datafit$NDVI[end]
time2 <- seq(1:11) #Time2
IC <-  rep(NA,length(time2))
#names(initC) <- time
IC
IC[1] <- initialC2
raint_1<-observed_timeseries$rain[(n-10):(n-1)]
#create AR growth function with rain
ARgrowth_rain <- function(B0_1,B1_2,B2,IC,raint_1){
final_result = B0_1+B1_2*IC+B2*raint_1
return(final_result)
}
#run for loop
t=1
for (t in 2:length(time2)){
IC[t] = ARgrowth_rain(B0_1 = B0_1, B1_2 = B1_2, B2=B2, IC = IC[t-1], raint_1=raint_1[t-1])
}
IC
#plot IC trend with NDVI points overlaying it
plot(1:11,IC,ylab='NDVI',xlab='Month', type='l',ylim=c(0,.5))
points(observed_timeseries$NDVI[(n-10):n], col='red')
# witness a slight hump occur in the line from 7 to 11 months
### applying RMSE
# calculating rmse across 11 months of NDVI
# create an rmse function
RMSE <- function(ypred, yobs){
SS <- sum((ypred-yobs)^2)
RMSE_out <- sqrt(SS/length(yobs))
return(RMSE_out)
}
Obs <- observed_timeseries$NDVI[(n-10):n]
RMSE(IC[1:11],Obs[1:11]) # run to calculate rmse from month 1 all the way up to month 11
# calculating rmse across 11 months looking at rain as a covariate
m=1
cumrmse.rain <- numeric(length(time2))   # storing cumulative rmses
#initiating for loop to calculate rmses over 11 months
for(m in 2:length(time2)){
cumrmse.rain[m] <- RMSE(IC[1:m],Obs[1:m])
}
cumrmse.rain
# plotting cumulative rmses to time ONLY for model and observed including rain
plot(time2,cumrmse.rain,type="l", ylab = "NDVI with Rain", xlab = "Months")
n=1
cumrmse <- numeric(length(time))   # storing cumulative rmses
#initiating for loop to calculate rmses over 11 months
for(n in 2:length(time)){
cumrmse[n] <- RMSE(C[1:n],Obs[1:n])
}
cumrmse
# plotting cumulative rmses to time ONLY for model and observed
plot(time,cumrmse,type="l", ylab = "NDVI", xlab = "Months")
plot(time2,cumrmse.rain,type="l", ylab = "NDVI with Rain", xlab = "Months")
n=1
cumrmse <- numeric(length(time))   # storing cumulative rmses
#initiating for loop to calculate rmses over 11 months
for(n in 2:length(time)){
cumrmse[n] <- RMSE(C[1:n],Obs[1:n])
}
cumrmse
# plotting cumulative rmses to time ONLY for model and observed
lines(time,cumrmse,type="l", ylab = "NDVI", xlab = "Months")
plot(time2,cumrmse.rain,type="l", ylab = "NDVI with Rain", xlab = "Months")
n=1
cumrmse <- numeric(length(time))   # storing cumulative rmses
#initiating for loop to calculate rmses over 11 months
for(n in 2:length(time)){
cumrmse[n] <- RMSE(C[1:n],Obs[1:n])
}
cumrmse
# plotting cumulative rmses to time ONLY for model and observed
lines(time,cumrmse,type="l", ylab = "NDVI", xlab = "Months")
data<-observed_timeseries
# drop last 10 data points, these 10 will be 'out-of-bag', withheld for prediction later
n <- dim(data)[1]
observed <- data[1:(n-10),] # all but the last 10 rows, all the columns
test_data <- data[(n-9):n,] # these 10 will be used later for testing
n_observed <- length(observed$NDVI)
## 1. Fit AR model using glm() ----
model <- glm(NDVI[-1] ~ NDVI[-n_observed], data = observed) #
plot(observed$NDVI[-n_observed], observed$NDVI[-1])
plot(model)
Forecast <- function(b0, b1, initial, t){
predicted <- numeric(t) # initialize vector for 10 predicted values
for (i in 1:t){
predicted[i] <- b0 + b1*initial
initial <- predicted[i]
}
return(predicted)
}
predictedNDVI <- Forecast(b0=coef[1], b1=coef[2], initial=observed$NDVI[n_observed], t=10)
Forecast <- function(b0, b1, initial, t){
predicted <- numeric(t) # initialize vector for 10 predicted values
for (i in 1:t){
predicted[i] <- b0 + b1*initial
initial <- predicted[i]
}
return(predicted)
}
predictedNDVI <- Forecast(b0=coef[1], b1=coef[2], initial=observed$NDVI[n_observed], t=10)
coef <- model$coefficients
## 2. Create function to forecast NDVI, and forecast 10 months of the NDVI data we withheld ----
Forecast <- function(b0, b1, initial, t){
predicted <- numeric(t) # initialize vector for 10 predicted values
for (i in 1:t){
predicted[i] <- b0 + b1*initial
initial <- predicted[i]
}
return(predicted)
}
predictedNDVI <- Forecast(b0=coef[1], b1=coef[2], initial=observed$NDVI[n_observed], t=10)
plot(1:10, predictedNDVI, main='AR1 NDVI Model', ylab='NDVI', xlab='Month', type='l', col='red', lwd=1.2, ylim=c(0,.5), )
points(test_data$NDVI, pch=20, col='black')
## 3. Include Rain in the Predicted Values ----
model2 <- glm(NDVI[-1] ~ NDVI[-n_observed] + rain[-n_observed], data = observed)
coef2 <- model2$coefficients
ForecastCov <- function(b0, b1, b2, initial, covariate, t){
predicted <- numeric(t) # initialize vector for 10 predicted values
for (i in 1:t){
predicted[i] <- b0 + b1*initial + b2*covariate[i]
initial <- predicted[i]
}
return(predicted)
}
predictedNDVIrain <- ForecastCov(b0=coef2[1], b1=coef2[2], b2=coef2[3], initial=observed$NDVI[n_observed], covariate=data$rain[(n-10):(n-1)], t=10)
plot(1:10, predictedNDVIrain, ylab='NDVI', xlab='Month', main='AR1 NDVI+rain Model', type='l', lwd=1.2, col='blue', ylim=c(0,.5))
points(test_data$NDVI, pch=20, col='black')
#source('~/Desktop/EcoForecast/Functions_EcoForecast.R')
RMSEFunc <- function(ypred, yobs){
SS <- sum((ypred - yobs)^2) # sum of squares
RMSE_out <- sqrt(SS/length(yobs))
return(RMSE_out)
}
## test our 2 forecasts ----
rmse1 = numeric()
for (i in 1:10){
rmse1[i]  <- RMSEFunc(predictedNDVI[1:i], test_data$NDVI[1:i])
}
rmse1
rmse2 = numeric()
for (i in 1:10){
rmse2[i] <- RMSEFunc(predictedNDVIrain[1:i], test_data$NDVI[1:i])
}
rmse2
plot(1:10, rmse1,
col='red', type='l', lty=1,
main='NDVI Model Comparison', ylab='rmse', xlab='month',
ylim = c(0,.12))
points(1:10, rmse2,
col='blue', type='l', lty=1)
legend('topleft', inset=.05,
legend=c("past NDVI", "past NDVI+rain"),
col=c("red", "blue"), lty=1, cex=0.8,
title="Model inputs", text.font=3, box.lty=0)
